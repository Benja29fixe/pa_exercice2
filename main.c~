#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <math.h>
#include "Grille.h"
#include "Solution.h"
#include "API_AffGrille.h"


int main(int argc,char**argv){
  
  Grille G;
  AffGrille AG;
  Solution S;
  int graine;
  int i,j;
  int num_algo;
  int nb1, nb2, nb3, nb4, nb5;
  LDC ldc;
  

  /* les différents arguments */
  
  if(argc!=5){
    printf("usage: %s <nb_lignes> <nb_colonnes> <nb_couleur> <graine> \n",argv[0]);
    return 1;
  }

  G.m=atoi(argv[1]);
  G.n=atoi(argv[2]);
  
  if (G.m>G.n){
    printf("Il doit y avoir plus de colonnes que de lignes.\n");
    exit(1);
  }
  
  G.nbcoul=atoi(argv[3]);
  if (G.nbcoul!=G.m*G.n){
    printf("Il doit y avoir autand de couleurs différentes que de cases.\n");
    exit(1);
  }
  
  graine=atoi(argv[4]);

  /* Generation de l'instance */
  Grille_allocation(&G);
  Gene_Grille(&G,graine);
  Solution_init(&S);

  /* Premier affichage de la grille sur le terminal*/
  affichage(G.m, G.n, G);

  /* Les 4 algorithmes de la partie 1 */
  printf("+---Choix de l'algorithme------------------+\n");
  printf("|1 : algorithme naif                       |\n");
  printf("|2 : algorithme circulaire                 |\n");
  printf("|3 : algorithme par couleur                |\n");
  printf("|4 : algorithme AVL                        |\n");
  printf("+------------------------------------------+\n");
 
  printf("\n");

  switch(num_algo)
    {

      /*****************************************/
      /**** EXERCICE 1 : ALGO NAIF *************/
      /*****************************************/
    case 1:
      printf("ALGO NAIF \n");
      printf("========= \n");

       /*******************************/
      f1=fopen("temps/algo_naif.temps", "a");
      /*******************************/
      /* Execution de l'algorithme naif */
       /*******************************/
      temps_initial=clock();
      /*******************************/
      algo_naif(&G, &S);
      /*******************************/
      temps_final=clock();
      temps_cpu =((double)(temps_final-temps_initial))/ CLOCKS_PER_SEC;
      fprintf(f1, "%d %d %d %f\n", G.m, G.n, G.nbcoul, temps_cpu);
      fclose(f1);
      /*******************************/
      Ecriture_Disque(G.m, G.n, G.nbcoul, graine, &S);
  
      /* Après algo_naif, affichage de la grille sur le terminal */
      affichage(G.m, G.n, G);

      /* Affiche le nombre de pas et le chemin */
      Affiche(&S);
      break;

      /*****************************************/
      /**** EXERCICE 2 : ALGO CIRCULAIRE *******/
      /*****************************************/
    case 2:
      printf("ALGO CIRCULAIRE \n");
      printf("=============== \n");
     
      algorithme_circulaire(&G, &S);
      Ecriture_Disque(G.m, G.n, G.nbcoul, graine, &S);
  
      /* Après algo circulaire, affichage de la grille sur le terminal */
      affichage(G.m, G.n, G);

      /* Affiche le nombre de pas et le chemin */
      Affiche(&S);

      break;
      
      /*****************************************/
      /**** EXERCICE 3 : ALGO COULEUR **********/
      /*****************************************/
    case 3:
      printf("ALGO PAR COULEUR \n");
      printf("================ \n");
  
      LDCInitialise(&ldc);

       /*******************************/
      f3=fopen("temps/algo_couleur.temps", "a");
      /*******************************/
      /* Execution de l'algorithme par couleur */
       /*******************************/
      temps_initial=clock();
      /*******************************/
      algo_parcouleur(&G, &S);
       /*******************************/
      temps_final=clock();
      temps_cpu =((double)(temps_final-temps_initial))/ CLOCKS_PER_SEC;
      fprintf(f3, "%d %d %d %f\n", G.m, G.n, G.nbcoul, temps_cpu);
      fclose(f3);
      /*******************************/

      Ecriture_Disque(G.m, G.n, G.nbcoul, graine, &S);
  
      /*Après algo_parcouleur, affichage de la grille sur le terminal*/
      affichage(G.m, G.n, G);

      /* Affiche le nombre de pas et le chemin */
      Affiche(&S);
      
      break;

      /*****************************************/
      /**** EXERCICE 4 : ALGO AVL ***************/
      /******************************************/
    case 4:

      printf("-----------------------\n");
      printf("Test fonctions AVL\n");
      printf("==================\n");
      
      AVL *ab1=creer_avl(7, creer_avl(3, creer_avl(2, NULL, NULL), NULL), creer_avl(12, NULL, NULL));
	    
      printf("Affichage infixe de l'arbre : ");    
      affichage_infixe(ab1);
      printf("\nHauteur de l'arbre : %d\n", ab1->hauteur);
     
      AVL *ab3=creer_avl(5, NULL, NULL); 
      ab3=inserer_element_avl(ab3, 12);
      ab3=inserer_element_avl(ab3, 1);
      ab3=inserer_element_avl(ab3, 9);
      ab3=inserer_element_avl(ab3, 8);
      ab3=inserer_element_avl(ab3, 7);
      ab3=inserer_element_avl(ab3, 6);
      affichage_infixe(ab3);
	   
      printf("\n-----------------------\n");
	     
      break;
      
      return 0;
    }
}

   
